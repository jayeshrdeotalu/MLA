#include <iostream>
using namespace std;

class MAT{
  int a[2][2]; // Matrix array to store elements

  public:
  // Function to accept matrix elements from user
  void accept()
  {
    cout << "\n\n Enter 4 elements of matrix : " << endl;
    for (int i = 0; i < 2; i++)
    {
      for (int j = 0; j < 2; j++)
        cin >> a[i][j];
    }
  }

// Function to display matrix elements
  void display()
  {
    for (int i = 0; i < 2; i++)
    {
      cout << endl;
      for (int j = 0; j < 2; j++)
        cout << " " << a[i][j];
    }
  }

  // Overloaded operator for matrix addition
  MAT operator+(MAT M2)
  {
    MAT M3;
    for (int i = 0; i < 2; i++)
    {
      for (int j = 0; j < 2; j++)
      {
        M3.a[i][j] = a[i][j] + M2.a[i][j];
      }
    }
    return M3;
  }

  // Overloaded operator for matrix subtraction
  MAT operator-(MAT M2)
  {
    MAT M3;
    for (int i = 0; i < 2; i++)
    {
      for (int j = 0; j < 2; j++)
      {
        M3.a[i][j] = a[i][j] - M2.a[i][j];
      }
    }
    return M3;
  }

  // Overloaded operator for matrix multiplication
  MAT operator*(MAT M2)
  {
    MAT M3;
    for (int i = 0; i < 2; i++)
    {
      for (int j = 0; j < 2; j++)
      {
        M3.a[i][j] = 0;
        for (int k = 0; k < 2; k++)
        {
          M3.a[i][j] = (a[i][k] * M2.a[k][j]) + M3.a[i][j];
        }
      }
    }
    return M3;
  }

  // Function to calculate the transpose of the matrix
  MAT transpose()
  {
    MAT M_transpose;

    for (int i = 0; i < 2; i++)
    {
      for (int j = 0; j < 2; j++)
      {
        M_transpose.a[i][j] = a[j][i]; // Swap rows and columns to get transpose
      }
    }

    return M_transpose;
  }
};


int main()

  {

  MAT M1, M2, M3;

  // Accepting user input for the first matrix
  cout << "\n\n Enter Matrix M1 : ";
  M1.accept();

  // Accepting user input for the second matrix
  cout << "\n\n Enter Matrix M2 : ";
  M2.accept();

  // Performing addition of matrices M1 and M2
  M3 = M1 + M2;
  cout << "\n\n Addition of M1 and M2 : ";
  M3.display();

  // Performing subtraction of matrices M1 and M2
  M3 = M1 - M2;
  cout << "\n\n Subtraction of M1 and M2 : ";
  M3.display();

  // Performing multiplication of matrices M1 and M2
  M3 = M1 * M2;
  cout << "\n\n Multiplication of M1 and M2 : ";
  M3.display();

  // Calculating and displaying the transpose of M1
  MAT M1_transpose = M1.transpose();
  cout << "\n\n Transpose of Matrix M1 : ";
  M1_transpose.display();
  return 0;
  }
