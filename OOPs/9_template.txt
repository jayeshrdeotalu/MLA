#include <iostream>
using namespace std ;

template <typename T, size_t size>
T findMin(T (&arr)[size]) {
    T minVal = arr[0];
    for (size_t i = 1; i < size; ++i) {
        if (arr[i] < minVal) {
            minVal = arr[i];
        }
    }
    return minVal;
}

int main() {
    int intArr[] = {5, 2, 8, 1, 6};
    double doubleArr[] = {3.5, 1.2, 7.8, 0.5, 9.3};

    std::cout << "Minimum value in intArr: " << findMin(intArr) << endl;
    cout << "Minimum value in doubleArr: " << findMin(doubleArr) << endl;

    return 0;
}

#include <iostream>
using namespace std;

// One function works for all data types. This would work
// even for user defined types if operator '>' is overloaded
template <typename T> T myMax(T x, T y)
{
    return (x > y) ? x : y;
}

int main()
{
    // Call myMax for int
    cout << myMax<int>(3, 7) << endl;
    // call myMax for double
    cout << myMax<double>(3.0, 7.0) << endl;
    // call myMax for char
    cout << myMax<char>('g', 'e') << endl;

    return 0;
}

