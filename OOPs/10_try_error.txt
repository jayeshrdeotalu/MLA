#include <iostream>
using namespace std;
class Exception {
  private:
    string message;
  public:
    Exception(const string& msg) : message(msg) {
    }
    string getMessage() const {
      return message;
    }
};
class Calculator {
  public:
    static double divide(double num1, double num2) {
      if (num2 == 0) {
        throw Exception("Cannot divide by zero");
      }
    return num1 / num2;
    }
};
int main() {
  try {
    double result1 = Calculator::divide(50, 2); // No exception
    cout << "Result 1: " << result1 << endl;
    double result2 = Calculator::divide(50, 0); // Will throw     Exception
    cout << "Result 2: " << result2 << endl; // This line will not be executed
  } catch (const Exception& exp) {
  cerr << "Error: " << exp.getMessage() << endl;
  }
  return 0;
}

#include <iostream>
#include <stdexcept>
using namespace std;
 
int main()
{
 
    // try block
    try {
        int numerator = 10;
        int denominator = 0;
        int res;
 
        // check if denominator is 0 then throw runtime
        // error.
        if (denominator == 0) {
            throw runtime_error(
                "Division by zero not allowed!");
        }
 
        // calculate result if no exception occurs
        res = numerator / denominator;
        //[printing result after division
        cout << "Result after division: " << res << endl;
    }
    // catch block to catch the thrown exception
    catch (const exception& e) {
        // print the exception
        cout << "Exception " << e.what() << endl;
    }
 
    return 0;
}
